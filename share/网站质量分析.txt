网站质量分析

1. 前端如何收集信息

2. 前端如何汇报信息


收集信息

    1. onload方法，对象加载完毕调用

        加载时间： 首屏刷新时间，页面没有向下滑动时，我们不关注

        一般页面加载首先加载完成框架，内容随后再填充，我们只要找首屏上关键位置图片，给图片元素加上onload方法就可以知道该图片完成加载的时间戳

        对多几张图片设置onload方法，在页面一开始计算一下时间戳，等所有图片都加载完成，用它们的时间戳减去一开始的时间戳，时间最长的为网站加载时间

    2. document.ready 
    
        所有文档树加载完毕，即框架加载完毕

    3. dns lookup time

        DNS返回服务器IP时间

    4. tcp connection time   
        
        从获取页面到连接上服务时间

    5. first paint

        客户端收到服务返回数据的第一个字节时间

    
高级__浏览器接口

    window.performance.timing   时间是指时间戳

    除了首屏时间，其它的时间数据都可以获取到

    fetchStart 检测是否有缓存

    domainLookupStart  DNS解析开始时间

    connectStart TCP开始连接时间

    requestStart 开始请求时间

    responseStart 视图处理开始，也是请求结束时间

    domLoading 文档树开始加载时间

    domComplete 文档树建立完成

    loadEventStart 文字、图片填充开始

    loadEventEnd 最终HTML文档整个加载完成，所有Start时间结束都是End结尾

    所有图片和静态文件都是单独下载的，再文档框架加载完成之后

    navigationType 0 | 1 | 2  
        
        区分数据是第一次下载还是使用本地缓存

        0 代表缓存

        1 代表第一次

        2 代表回退


数据汇报到服务器

    由于浏览器可能有jQuery也可能没有，或者版本差距很大，考虑到插件存在性问题，我们用Ajax向服务汇报数据时，要使用浏览器原生对象发送Ajax请求


在想要监测的网站文件底部加入代码

<!-- TengLan Analytics -->

<script>
    sniffer.report_url = 'http://127.0.0.1:9000/api/data/report/'; #监测结果汇报地址
    sniffer.bandwith_test_img = 'http://www.baidu.com'; #如果要测试用户带宽，指定下载测试图片
    sniffer.site_id = 1; #这是在服务器端帮这个站点分配的站点id
    sniffer.bandwith_test_img_size = 2500; #写清楚你要测试下载的图片大小，不测试带宽的话不需要

    sniffer.collect(sniffer); #开始收集数据并向服务器端汇报
</script>


数据存储格式

    数据存储的时候，要相同指标存一组，最小化，无论是对数据处理还是展示来说都简单了许多

    KEY --> site_1_firstpaint = [ 111, 123456456.12164, 10.0.0.1 ] IP 时间戳 指标值

    我们需要获取最近一分钟的数据

        KEY --> site_1_firstpaint_1755

        KEY --> site_1_firstpaint_1756

        KEY --> site_1_firstpaint_1757

        对整个列表设置超时时间