分布式监控系统笔记

为什么要做监控

    1. 监控是一个非常复杂的项目，运用了非常多的知识点，如果这个都能搞定，其它业务上项目也就没那么大的压力了

    2. 掌握自动化开发项目的程序设计思路及架构解藕原则


常用的主流的监控

    zabbix          C开发

    nagios          

    cacti           php开发

    gridcontrol     perl开发

    ganglia         java开发

    openfalcon      golang开发


zabbix监控的agent检测模式

    主动模式：agent请求server获取主动的监控项列表，并主动将监控项内需要检测的数据提交给server/proxy

    被动模式：server向agent请求获取监控项的数据，agent返回数据


监控需求

    硬件监控

        硬盘情况
        
        ...

    网络监控

        网络流量

        网络质量

        ...

    系统监控

        CPU
        
        RAM

        DISK

        LOAD

        IO

        ...

    应用监控

        MySQL

        Cache

        Web

        Queue

        Middleware

        ...

    服务状态监控

        PORT存活状态

        URL路由状态

        页面是否被篡改

        MySQL max connections

        待处理消息

        ...

    业务监控

        业务稳定性

        订单数

        在线用户数

        ...


功能分析

    1. 一台主机可以选择性监控多个监控项[ cpu, ram, nic, disk, io, load, ... ]

    2. 任意主机可以指定，扫描周期（例：CPU每30S获取一次信息），定时获取指定监控项的数据，并反馈

    3. 生成模板

        主机分组

            一类主机适用同种监控规则

        监控项组合分组打包成模板

            某种应用适用于几个监控项的组合（例如：应用需要监控cpu, ram, nic, disk, io, load，把这些监控项组合在一起）

    4. 同一个服务在不同主机上的报警阈值不同

    5. 报警级别

        不同的服务因为业务重要程度不同，针对不同的服务分组设置不同的报警级别

            Diaster

            High

            Warning

            Info

            Classfied

        可以指定特定的服务或报警级别的事件通知给特定的用户

        警告自动升级设定

            在应处理时间内未处理完成相应的报警事件，则事件的严重等级会提升

    6. 历史数据的存储和优化

        实现用最少的空间占用量存储最多的有效数据

            大数据聚合化，一段时间的数据取权求平均值保存，对一些不关注详细的历史数据可以采取的解决方案

        高效获取历史监控数据并展示

    7. 数据可视化，即简洁美观的用户界面

    8. 单机支持高监控量

    9. 主动、被动监控模式

    10. 监控服务器的线性扩展


监控项目架构

    数据库 MySQL

    主动通信 Snmp, wget, ...

    被动通信 Agent

    Socket server --> Socket client

    辅助C/S架构 RabbitMQ, redis's订阅发布, http


采用Http

    接口设计简单

    容易实现线性扩展做分布式

    Socket稳定性，省去较多的通信维护精力


监控流程

    主机监控配置信息

        下发给客户端监控程序的任务信息

        主机所在的主机组会有相应的模板，服务器获取到模板并下发

        服务器端需要告诉客户端，它的任务是什么，如何收集信息，使用到的插件，反馈信息周期

        1.  template = {
                cpu:{
                    'interval':30,
                    'plugin_name':'cpu_plugin'
                    'items':{
                        idle,
                        system,
                        iowait,
                    }
                },
                ram:[
                    'interval':30,
                    'plugin_name':'cpu_plugin'
                    'items':{
                        idle,
                        system,
                        usage,
                    }
                ]
            }

        2.  trigger = {
                cpu:{
                    index: idle, # 监控对象为CPU空闲率
                    threshold: 10, # 阈值
                    operator: lt, # lt or gt or eq
                    times: 5, # 超过阈值次数
                    func: avg, # hit or avg or last or max
                    time_range: 600, # 时间段，单位秒 
                }
            }


    服务器收到客户端的监控信息

        存入Redis Server

        存入优化存储

        做阈值判断和报警，结果存储到Redis Server中


    报警监控

        只要报警队列中有数据，就把它取出来，分析报警信息，并通知相应负责人


    主机存活监控

        只要客户端没有在规定的时间内，反馈信息，那么就表明客户端宕机，这时候需要把报警信息送至报警队列





        